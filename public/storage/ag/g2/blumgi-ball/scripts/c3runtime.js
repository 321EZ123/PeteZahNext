// Generated by Construct 3, the game and app creator :: https://www.construct.net
// ../3rdparty/glmatrix.js
{
    /*
     @fileoverview gl-matrix - High performance matrix and vector operations
    @author Brandon Jones
    @author Colin MacKenzie IV
    @version 3.4.1

    Copyright (c) 2015-2021, Brandon Jones, Colin MacKenzie IV.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

    */
    'use strict';
    (function(global, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.glMatrix = {}))
    })(this, function(exports) {
        var EPSILON = 1E-6;
        var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
        var RANDOM = Math.random;
        var ANGLE_ORDER = "zyx";

        function setMatrixArrayType(type) {
            ARRAY_TYPE = type
        }
        var degree = Math.PI / 180;

        function toRadian(a) {
            return a *
                degree
        }

        function equals$9(a, b) {
            return Math.abs(a - b) <= EPSILON * Math.max(1, Math.abs(a), Math.abs(b))
        }
        if (!Math.hypot) Math.hypot = function() {
            var y = 0,
                i = arguments.length;
            while (i--) y += arguments[i] * arguments[i];
            return Math.sqrt(y)
        };
        var common = Object.freeze({
            __proto__: null,
            EPSILON: EPSILON,
            get ARRAY_TYPE() {
                return ARRAY_TYPE
            },
            RANDOM: RANDOM,
            ANGLE_ORDER: ANGLE_ORDER,
            setMatrixArrayType: setMatrixArrayType,
            toRadian: toRadian,
            equals: equals$9
        });

        function create$8() {
            var out = new ARRAY_TYPE(4);
            if (ARRAY_TYPE != Float32Array) {
                out[1] =
                    0;
                out[2] = 0
            }
            out[0] = 1;
            out[3] = 1;
            return out
        }

        function clone$8(a) {
            var out = new ARRAY_TYPE(4);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            return out
        }

        function copy$8(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            return out
        }

        function identity$5(out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out
        }

        function fromValues$8(m00, m01, m10, m11) {
            var out = new ARRAY_TYPE(4);
            out[0] = m00;
            out[1] = m01;
            out[2] = m10;
            out[3] = m11;
            return out
        }

        function set$8(out, m00, m01, m10, m11) {
            out[0] = m00;
            out[1] = m01;
            out[2] = m10;
            out[3] = m11;
            return out
        }

        function transpose$2(out, a) {
            if (out === a) {
                var a1 = a[1];
                out[1] = a[2];
                out[2] = a1
            } else {
                out[0] = a[0];
                out[1] = a[2];
                out[2] = a[1];
                out[3] = a[3]
            }
            return out
        }

        function invert$5(out, a) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var det = a0 * a3 - a2 * a1;
            if (!det) return null;
            det = 1 / det;
            out[0] = a3 * det;
            out[1] = -a1 * det;
            out[2] = -a2 * det;
            out[3] = a0 * det;
            return out
        }

        function adjoint$2(out, a) {
            var a0 = a[0];
            out[0] = a[3];
            out[1] = -a[1];
            out[2] = -a[2];
            out[3] = a0;
            return out
        }

        function determinant$3(a) {
            return a[0] * a[3] - a[2] * a[1]
        }

        function multiply$8(out, a, b) {
            var a0 =
                a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3];
            out[0] = a0 * b0 + a2 * b1;
            out[1] = a1 * b0 + a3 * b1;
            out[2] = a0 * b2 + a2 * b3;
            out[3] = a1 * b2 + a3 * b3;
            return out
        }

        function rotate$4(out, a, rad) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = a0 * c + a2 * s;
            out[1] = a1 * c + a3 * s;
            out[2] = a0 * -s + a2 * c;
            out[3] = a1 * -s + a3 * c;
            return out
        }

        function scale$8(out, a, v) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var v0 = v[0],
                v1 = v[1];
            out[0] = a0 * v0;
            out[1] = a1 * v0;
            out[2] = a2 * v1;
            out[3] = a3 * v1;
            return out
        }

        function fromRotation$4(out,
            rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = c;
            out[1] = s;
            out[2] = -s;
            out[3] = c;
            return out
        }

        function fromScaling$3(out, v) {
            out[0] = v[0];
            out[1] = 0;
            out[2] = 0;
            out[3] = v[1];
            return out
        }

        function str$8(a) {
            return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")"
        }

        function frob$3(a) {
            return Math.hypot(a[0], a[1], a[2], a[3])
        }

        function LDU(L, D, U, a) {
            L[2] = a[2] / a[0];
            U[0] = a[0];
            U[1] = a[1];
            U[3] = a[3] - L[2] * U[1];
            return [L, D, U]
        }

        function add$8(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            out[3] = a[3] + b[3];
            return out
        }

        function subtract$6(out,
            a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            out[3] = a[3] - b[3];
            return out
        }

        function exactEquals$8(a, b) {
            return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3]
        }

        function equals$8(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3),
                Math.abs(b3))
        }

        function multiplyScalar$3(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            out[3] = a[3] * b;
            return out
        }

        function multiplyScalarAndAdd$3(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            out[2] = a[2] + b[2] * scale;
            out[3] = a[3] + b[3] * scale;
            return out
        }
        var mul$8 = multiply$8;
        var sub$6 = subtract$6;
        var mat2 = Object.freeze({
            __proto__: null,
            create: create$8,
            clone: clone$8,
            copy: copy$8,
            identity: identity$5,
            fromValues: fromValues$8,
            set: set$8,
            transpose: transpose$2,
            invert: invert$5,
            adjoint: adjoint$2,
            determinant: determinant$3,
            multiply: multiply$8,
            rotate: rotate$4,
            scale: scale$8,
            fromRotation: fromRotation$4,
            fromScaling: fromScaling$3,
            str: str$8,
            frob: frob$3,
            LDU: LDU,
            add: add$8,
            subtract: subtract$6,
            exactEquals: exactEquals$8,
            equals: equals$8,
            multiplyScalar: multiplyScalar$3,
            multiplyScalarAndAdd: multiplyScalarAndAdd$3,
            mul: mul$8,
            sub: sub$6
        });

        function create$7() {
            var out = new ARRAY_TYPE(6);
            if (ARRAY_TYPE != Float32Array) {
                out[1] = 0;
                out[2] = 0;
                out[4] = 0;
                out[5] = 0
            }
            out[0] = 1;
            out[3] = 1;
            return out
        }

        function clone$7(a) {
            var out = new ARRAY_TYPE(6);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            return out
        }

        function copy$7(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            return out
        }

        function identity$4(out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            out[4] = 0;
            out[5] = 0;
            return out
        }

        function fromValues$7(a, b, c, d, tx, ty) {
            var out = new ARRAY_TYPE(6);
            out[0] = a;
            out[1] = b;
            out[2] = c;
            out[3] = d;
            out[4] = tx;
            out[5] = ty;
            return out
        }

        function set$7(out, a, b, c, d, tx, ty) {
            out[0] = a;
            out[1] = b;
            out[2] = c;
            out[3] = d;
            out[4] = tx;
            out[5] = ty;
            return out
        }

        function invert$4(out,
            a) {
            var aa = a[0],
                ab = a[1],
                ac = a[2],
                ad = a[3];
            var atx = a[4],
                aty = a[5];
            var det = aa * ad - ab * ac;
            if (!det) return null;
            det = 1 / det;
            out[0] = ad * det;
            out[1] = -ab * det;
            out[2] = -ac * det;
            out[3] = aa * det;
            out[4] = (ac * aty - ad * atx) * det;
            out[5] = (ab * atx - aa * aty) * det;
            return out
        }

        function determinant$2(a) {
            return a[0] * a[3] - a[1] * a[2]
        }

        function multiply$7(out, a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3],
                b4 = b[4],
                b5 = b[5];
            out[0] = a0 * b0 + a2 * b1;
            out[1] = a1 * b0 + a3 * b1;
            out[2] = a0 * b2 + a2 * b3;
            out[3] = a1 * b2 + a3 * b3;
            out[4] =
                a0 * b4 + a2 * b5 + a4;
            out[5] = a1 * b4 + a3 * b5 + a5;
            return out
        }

        function rotate$3(out, a, rad) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5];
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = a0 * c + a2 * s;
            out[1] = a1 * c + a3 * s;
            out[2] = a0 * -s + a2 * c;
            out[3] = a1 * -s + a3 * c;
            out[4] = a4;
            out[5] = a5;
            return out
        }

        function scale$7(out, a, v) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5];
            var v0 = v[0],
                v1 = v[1];
            out[0] = a0 * v0;
            out[1] = a1 * v0;
            out[2] = a2 * v1;
            out[3] = a3 * v1;
            out[4] = a4;
            out[5] = a5;
            return out
        }

        function translate$3(out, a, v) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5];
            var v0 = v[0],
                v1 = v[1];
            out[0] = a0;
            out[1] = a1;
            out[2] = a2;
            out[3] = a3;
            out[4] = a0 * v0 + a2 * v1 + a4;
            out[5] = a1 * v0 + a3 * v1 + a5;
            return out
        }

        function fromRotation$3(out, rad) {
            var s = Math.sin(rad),
                c = Math.cos(rad);
            out[0] = c;
            out[1] = s;
            out[2] = -s;
            out[3] = c;
            out[4] = 0;
            out[5] = 0;
            return out
        }

        function fromScaling$2(out, v) {
            out[0] = v[0];
            out[1] = 0;
            out[2] = 0;
            out[3] = v[1];
            out[4] = 0;
            out[5] = 0;
            return out
        }

        function fromTranslation$3(out, v) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            out[4] = v[0];
            out[5] = v[1];
            return out
        }

        function str$7(a) {
            return "mat2d(" +
                a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")"
        }

        function frob$2(a) {
            return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1)
        }

        function add$7(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            out[3] = a[3] + b[3];
            out[4] = a[4] + b[4];
            out[5] = a[5] + b[5];
            return out
        }

        function subtract$5(out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            out[3] = a[3] - b[3];
            out[4] = a[4] - b[4];
            out[5] = a[5] - b[5];
            return out
        }

        function multiplyScalar$2(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            out[3] = a[3] * b;
            out[4] =
                a[4] * b;
            out[5] = a[5] * b;
            return out
        }

        function multiplyScalarAndAdd$2(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            out[2] = a[2] + b[2] * scale;
            out[3] = a[3] + b[3] * scale;
            out[4] = a[4] + b[4] * scale;
            out[5] = a[5] + b[5] * scale;
            return out
        }

        function exactEquals$7(a, b) {
            return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5]
        }

        function equals$7(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3],
                b4 = b[4],
                b5 = b[5];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1,
                Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5))
        }
        var mul$7 = multiply$7;
        var sub$5 = subtract$5;
        var mat2d = Object.freeze({
            __proto__: null,
            create: create$7,
            clone: clone$7,
            copy: copy$7,
            identity: identity$4,
            fromValues: fromValues$7,
            set: set$7,
            invert: invert$4,
            determinant: determinant$2,
            multiply: multiply$7,
            rotate: rotate$3,
            scale: scale$7,
            translate: translate$3,
            fromRotation: fromRotation$3,
            fromScaling: fromScaling$2,
            fromTranslation: fromTranslation$3,
            str: str$7,
            frob: frob$2,
            add: add$7,
            subtract: subtract$5,
            multiplyScalar: multiplyScalar$2,
            multiplyScalarAndAdd: multiplyScalarAndAdd$2,
            exactEquals: exactEquals$7,
            equals: equals$7,
            mul: mul$7,
            sub: sub$5
        });

        function create$6() {
            var out = new ARRAY_TYPE(9);
            if (ARRAY_TYPE != Float32Array) {
                out[1] = 0;
                out[2] = 0;
                out[3] =
                    0;
                out[5] = 0;
                out[6] = 0;
                out[7] = 0
            }
            out[0] = 1;
            out[4] = 1;
            out[8] = 1;
            return out
        }

        function fromMat4$1(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[4];
            out[4] = a[5];
            out[5] = a[6];
            out[6] = a[8];
            out[7] = a[9];
            out[8] = a[10];
            return out
        }

        function clone$6(a) {
            var out = new ARRAY_TYPE(9);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            return out
        }

        function copy$6(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] =
                a[8];
            return out
        }

        function fromValues$6(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
            var out = new ARRAY_TYPE(9);
            out[0] = m00;
            out[1] = m01;
            out[2] = m02;
            out[3] = m10;
            out[4] = m11;
            out[5] = m12;
            out[6] = m20;
            out[7] = m21;
            out[8] = m22;
            return out
        }

        function set$6(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
            out[0] = m00;
            out[1] = m01;
            out[2] = m02;
            out[3] = m10;
            out[4] = m11;
            out[5] = m12;
            out[6] = m20;
            out[7] = m21;
            out[8] = m22;
            return out
        }

        function identity$3(out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 1;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 1;
            return out
        }

        function transpose$1(out,
            a) {
            if (out === a) {
                var a01 = a[1],
                    a02 = a[2],
                    a12 = a[5];
                out[1] = a[3];
                out[2] = a[6];
                out[3] = a01;
                out[5] = a[7];
                out[6] = a02;
                out[7] = a12
            } else {
                out[0] = a[0];
                out[1] = a[3];
                out[2] = a[6];
                out[3] = a[1];
                out[4] = a[4];
                out[5] = a[7];
                out[6] = a[2];
                out[7] = a[5];
                out[8] = a[8]
            }
            return out
        }

        function invert$3(out, a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2];
            var a10 = a[3],
                a11 = a[4],
                a12 = a[5];
            var a20 = a[6],
                a21 = a[7],
                a22 = a[8];
            var b01 = a22 * a11 - a12 * a21;
            var b11 = -a22 * a10 + a12 * a20;
            var b21 = a21 * a10 - a11 * a20;
            var det = a00 * b01 + a01 * b11 + a02 * b21;
            if (!det) return null;
            det = 1 / det;
            out[0] = b01 *
                det;
            out[1] = (-a22 * a01 + a02 * a21) * det;
            out[2] = (a12 * a01 - a02 * a11) * det;
            out[3] = b11 * det;
            out[4] = (a22 * a00 - a02 * a20) * det;
            out[5] = (-a12 * a00 + a02 * a10) * det;
            out[6] = b21 * det;
            out[7] = (-a21 * a00 + a01 * a20) * det;
            out[8] = (a11 * a00 - a01 * a10) * det;
            return out
        }

        function adjoint$1(out, a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2];
            var a10 = a[3],
                a11 = a[4],
                a12 = a[5];
            var a20 = a[6],
                a21 = a[7],
                a22 = a[8];
            out[0] = a11 * a22 - a12 * a21;
            out[1] = a02 * a21 - a01 * a22;
            out[2] = a01 * a12 - a02 * a11;
            out[3] = a12 * a20 - a10 * a22;
            out[4] = a00 * a22 - a02 * a20;
            out[5] = a02 * a10 - a00 * a12;
            out[6] = a10 * a21 - a11 * a20;
            out[7] = a01 * a20 - a00 * a21;
            out[8] = a00 * a11 - a01 * a10;
            return out
        }

        function determinant$1(a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2];
            var a10 = a[3],
                a11 = a[4],
                a12 = a[5];
            var a20 = a[6],
                a21 = a[7],
                a22 = a[8];
            return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20)
        }

        function multiply$6(out, a, b) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2];
            var a10 = a[3],
                a11 = a[4],
                a12 = a[5];
            var a20 = a[6],
                a21 = a[7],
                a22 = a[8];
            var b00 = b[0],
                b01 = b[1],
                b02 = b[2];
            var b10 = b[3],
                b11 = b[4],
                b12 = b[5];
            var b20 = b[6],
                b21 = b[7],
                b22 = b[8];
            out[0] = b00 * a00 + b01 * a10 + b02 * a20;
            out[1] =
                b00 * a01 + b01 * a11 + b02 * a21;
            out[2] = b00 * a02 + b01 * a12 + b02 * a22;
            out[3] = b10 * a00 + b11 * a10 + b12 * a20;
            out[4] = b10 * a01 + b11 * a11 + b12 * a21;
            out[5] = b10 * a02 + b11 * a12 + b12 * a22;
            out[6] = b20 * a00 + b21 * a10 + b22 * a20;
            out[7] = b20 * a01 + b21 * a11 + b22 * a21;
            out[8] = b20 * a02 + b21 * a12 + b22 * a22;
            return out
        }

        function translate$2(out, a, v) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a10 = a[3],
                a11 = a[4],
                a12 = a[5],
                a20 = a[6],
                a21 = a[7],
                a22 = a[8],
                x = v[0],
                y = v[1];
            out[0] = a00;
            out[1] = a01;
            out[2] = a02;
            out[3] = a10;
            out[4] = a11;
            out[5] = a12;
            out[6] = x * a00 + y * a10 + a20;
            out[7] = x * a01 + y * a11 + a21;
            out[8] = x *
                a02 + y * a12 + a22;
            return out
        }

        function rotate$2(out, a, rad) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a10 = a[3],
                a11 = a[4],
                a12 = a[5],
                a20 = a[6],
                a21 = a[7],
                a22 = a[8],
                s = Math.sin(rad),
                c = Math.cos(rad);
            out[0] = c * a00 + s * a10;
            out[1] = c * a01 + s * a11;
            out[2] = c * a02 + s * a12;
            out[3] = c * a10 - s * a00;
            out[4] = c * a11 - s * a01;
            out[5] = c * a12 - s * a02;
            out[6] = a20;
            out[7] = a21;
            out[8] = a22;
            return out
        }

        function scale$6(out, a, v) {
            var x = v[0],
                y = v[1];
            out[0] = x * a[0];
            out[1] = x * a[1];
            out[2] = x * a[2];
            out[3] = y * a[3];
            out[4] = y * a[4];
            out[5] = y * a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            return out
        }

        function fromTranslation$2(out, v) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 1;
            out[5] = 0;
            out[6] = v[0];
            out[7] = v[1];
            out[8] = 1;
            return out
        }

        function fromRotation$2(out, rad) {
            var s = Math.sin(rad),
                c = Math.cos(rad);
            out[0] = c;
            out[1] = s;
            out[2] = 0;
            out[3] = -s;
            out[4] = c;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 1;
            return out
        }

        function fromScaling$1(out, v) {
            out[0] = v[0];
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = v[1];
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 1;
            return out
        }

        function fromMat2d(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = 0;
            out[3] = a[2];
            out[4] = a[3];
            out[5] = 0;
            out[6] = a[4];
            out[7] = a[5];
            out[8] = 1;
            return out
        }

        function fromQuat$1(out, q) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3];
            var x2 = x + x;
            var y2 = y + y;
            var z2 = z + z;
            var xx = x * x2;
            var yx = y * x2;
            var yy = y * y2;
            var zx = z * x2;
            var zy = z * y2;
            var zz = z * z2;
            var wx = w * x2;
            var wy = w * y2;
            var wz = w * z2;
            out[0] = 1 - yy - zz;
            out[3] = yx - wz;
            out[6] = zx + wy;
            out[1] = yx + wz;
            out[4] = 1 - xx - zz;
            out[7] = zy - wx;
            out[2] = zx - wy;
            out[5] = zy + wx;
            out[8] = 1 - xx - yy;
            return out
        }

        function normalFromMat4(out, a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a03 = a[3];
            var a10 = a[4],
                a11 = a[5],
                a12 = a[6],
                a13 = a[7];
            var a20 =
                a[8],
                a21 = a[9],
                a22 = a[10],
                a23 = a[11];
            var a30 = a[12],
                a31 = a[13],
                a32 = a[14],
                a33 = a[15];
            var b00 = a00 * a11 - a01 * a10;
            var b01 = a00 * a12 - a02 * a10;
            var b02 = a00 * a13 - a03 * a10;
            var b03 = a01 * a12 - a02 * a11;
            var b04 = a01 * a13 - a03 * a11;
            var b05 = a02 * a13 - a03 * a12;
            var b06 = a20 * a31 - a21 * a30;
            var b07 = a20 * a32 - a22 * a30;
            var b08 = a20 * a33 - a23 * a30;
            var b09 = a21 * a32 - a22 * a31;
            var b10 = a21 * a33 - a23 * a31;
            var b11 = a22 * a33 - a23 * a32;
            var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
            if (!det) return null;
            det = 1 / det;
            out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
            out[1] = (a12 *
                b08 - a10 * b11 - a13 * b07) * det;
            out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
            out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
            out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
            out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
            out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
            out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
            out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
            return out
        }

        function projection(out, width, height) {
            out[0] = 2 / width;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = -2 / height;
            out[5] = 0;
            out[6] = -1;
            out[7] = 1;
            out[8] = 1;
            return out
        }

        function str$6(a) {
            return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " +
                a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")"
        }

        function frob$1(a) {
            return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])
        }

        function add$6(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            out[3] = a[3] + b[3];
            out[4] = a[4] + b[4];
            out[5] = a[5] + b[5];
            out[6] = a[6] + b[6];
            out[7] = a[7] + b[7];
            out[8] = a[8] + b[8];
            return out
        }

        function subtract$4(out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            out[3] = a[3] - b[3];
            out[4] = a[4] - b[4];
            out[5] = a[5] - b[5];
            out[6] = a[6] - b[6];
            out[7] = a[7] - b[7];
            out[8] =
                a[8] - b[8];
            return out
        }

        function multiplyScalar$1(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            out[3] = a[3] * b;
            out[4] = a[4] * b;
            out[5] = a[5] * b;
            out[6] = a[6] * b;
            out[7] = a[7] * b;
            out[8] = a[8] * b;
            return out
        }

        function multiplyScalarAndAdd$1(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            out[2] = a[2] + b[2] * scale;
            out[3] = a[3] + b[3] * scale;
            out[4] = a[4] + b[4] * scale;
            out[5] = a[5] + b[5] * scale;
            out[6] = a[6] + b[6] * scale;
            out[7] = a[7] + b[7] * scale;
            out[8] = a[8] + b[8] * scale;
            return out
        }

        function exactEquals$6(a, b) {
            return a[0] === b[0] &&
                a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8]
        }

        function equals$6(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5],
                a6 = a[6],
                a7 = a[7],
                a8 = a[8];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3],
                b4 = b[4],
                b5 = b[5],
                b6 = b[6],
                b7 = b[7],
                b8 = b[8];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON *
                Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8))
        }
        var mul$6 = multiply$6;
        var sub$4 = subtract$4;
        var mat3 = Object.freeze({
            __proto__: null,
            create: create$6,
            fromMat4: fromMat4$1,
            clone: clone$6,
            copy: copy$6,
            fromValues: fromValues$6,
            set: set$6,
            identity: identity$3,
            transpose: transpose$1,
            invert: invert$3,
            adjoint: adjoint$1,
            determinant: determinant$1,
            multiply: multiply$6,
            translate: translate$2,
            rotate: rotate$2,
            scale: scale$6,
            fromTranslation: fromTranslation$2,
            fromRotation: fromRotation$2,
            fromScaling: fromScaling$1,
            fromMat2d: fromMat2d,
            fromQuat: fromQuat$1,
            normalFromMat4: normalFromMat4,
            projection: projection,
            str: str$6,
            frob: frob$1,
            add: add$6,
            subtract: subtract$4,
            multiplyScalar: multiplyScalar$1,
            multiplyScalarAndAdd: multiplyScalarAndAdd$1,
            exactEquals: exactEquals$6,
            equals: equals$6,
            mul: mul$6,
            sub: sub$4
        });

        function create$5() {
            var out = new ARRAY_TYPE(16);
            if (ARRAY_TYPE != Float32Array) {
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 0;
                out[6] = 0;
                out[7] = 0;
                out[8] = 0;
                out[9] = 0;
                out[11] = 0;
                out[12] = 0;
                out[13] = 0;
                out[14] = 0
            }
            out[0] = 1;
            out[5] = 1;
            out[10] = 1;
            out[15] = 1;
            return out
        }

        function clone$5(a) {
            var out = new ARRAY_TYPE(16);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] =
                a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
            return out
        }

        function copy$5(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
            return out
        }

        function fromValues$5(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
            var out = new ARRAY_TYPE(16);
            out[0] = m00;
            out[1] = m01;
            out[2] = m02;
            out[3] = m03;
            out[4] = m10;
            out[5] = m11;
            out[6] = m12;
            out[7] = m13;
            out[8] =
                m20;
            out[9] = m21;
            out[10] = m22;
            out[11] = m23;
            out[12] = m30;
            out[13] = m31;
            out[14] = m32;
            out[15] = m33;
            return out
        }

        function set$5(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
            out[0] = m00;
            out[1] = m01;
            out[2] = m02;
            out[3] = m03;
            out[4] = m10;
            out[5] = m11;
            out[6] = m12;
            out[7] = m13;
            out[8] = m20;
            out[9] = m21;
            out[10] = m22;
            out[11] = m23;
            out[12] = m30;
            out[13] = m31;
            out[14] = m32;
            out[15] = m33;
            return out
        }

        function identity$2(out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = 1;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 1;
            out[11] =
                0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function transpose(out, a) {
            if (out === a) {
                var a01 = a[1],
                    a02 = a[2],
                    a03 = a[3];
                var a12 = a[6],
                    a13 = a[7];
                var a23 = a[11];
                out[1] = a[4];
                out[2] = a[8];
                out[3] = a[12];
                out[4] = a01;
                out[6] = a[9];
                out[7] = a[13];
                out[8] = a02;
                out[9] = a12;
                out[11] = a[14];
                out[12] = a03;
                out[13] = a13;
                out[14] = a23
            } else {
                out[0] = a[0];
                out[1] = a[4];
                out[2] = a[8];
                out[3] = a[12];
                out[4] = a[1];
                out[5] = a[5];
                out[6] = a[9];
                out[7] = a[13];
                out[8] = a[2];
                out[9] = a[6];
                out[10] = a[10];
                out[11] = a[14];
                out[12] = a[3];
                out[13] = a[7];
                out[14] = a[11];
                out[15] =
                    a[15]
            }
            return out
        }

        function invert$2(out, a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a03 = a[3];
            var a10 = a[4],
                a11 = a[5],
                a12 = a[6],
                a13 = a[7];
            var a20 = a[8],
                a21 = a[9],
                a22 = a[10],
                a23 = a[11];
            var a30 = a[12],
                a31 = a[13],
                a32 = a[14],
                a33 = a[15];
            var b00 = a00 * a11 - a01 * a10;
            var b01 = a00 * a12 - a02 * a10;
            var b02 = a00 * a13 - a03 * a10;
            var b03 = a01 * a12 - a02 * a11;
            var b04 = a01 * a13 - a03 * a11;
            var b05 = a02 * a13 - a03 * a12;
            var b06 = a20 * a31 - a21 * a30;
            var b07 = a20 * a32 - a22 * a30;
            var b08 = a20 * a33 - a23 * a30;
            var b09 = a21 * a32 - a22 * a31;
            var b10 = a21 * a33 - a23 * a31;
            var b11 = a22 * a33 - a23 * a32;
            var det =
                b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
            if (!det) return null;
            det = 1 / det;
            out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
            out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
            out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
            out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
            out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
            out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
            out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
            out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
            out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
            out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
            out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
            out[11] = (a21 * b02 -
                a20 * b04 - a23 * b00) * det;
            out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
            out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
            out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
            out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
            return out
        }

        function adjoint(out, a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a03 = a[3];
            var a10 = a[4],
                a11 = a[5],
                a12 = a[6],
                a13 = a[7];
            var a20 = a[8],
                a21 = a[9],
                a22 = a[10],
                a23 = a[11];
            var a30 = a[12],
                a31 = a[13],
                a32 = a[14],
                a33 = a[15];
            var b00 = a00 * a11 - a01 * a10;
            var b01 = a00 * a12 - a02 * a10;
            var b02 = a00 * a13 - a03 * a10;
            var b03 = a01 * a12 - a02 * a11;
            var b04 = a01 * a13 - a03 * a11;
            var b05 =
                a02 * a13 - a03 * a12;
            var b06 = a20 * a31 - a21 * a30;
            var b07 = a20 * a32 - a22 * a30;
            var b08 = a20 * a33 - a23 * a30;
            var b09 = a21 * a32 - a22 * a31;
            var b10 = a21 * a33 - a23 * a31;
            var b11 = a22 * a33 - a23 * a32;
            out[0] = a11 * b11 - a12 * b10 + a13 * b09;
            out[1] = a02 * b10 - a01 * b11 - a03 * b09;
            out[2] = a31 * b05 - a32 * b04 + a33 * b03;
            out[3] = a22 * b04 - a21 * b05 - a23 * b03;
            out[4] = a12 * b08 - a10 * b11 - a13 * b07;
            out[5] = a00 * b11 - a02 * b08 + a03 * b07;
            out[6] = a32 * b02 - a30 * b05 - a33 * b01;
            out[7] = a20 * b05 - a22 * b02 + a23 * b01;
            out[8] = a10 * b10 - a11 * b08 + a13 * b06;
            out[9] = a01 * b08 - a00 * b10 - a03 * b06;
            out[10] = a30 * b04 - a31 * b02 + a33 * b00;
            out[11] = a21 * b02 - a20 * b04 - a23 * b00;
            out[12] = a11 * b07 - a10 * b09 - a12 * b06;
            out[13] = a00 * b09 - a01 * b07 + a02 * b06;
            out[14] = a31 * b01 - a30 * b03 - a32 * b00;
            out[15] = a20 * b03 - a21 * b01 + a22 * b00;
            return out
        }

        function determinant(a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a03 = a[3];
            var a10 = a[4],
                a11 = a[5],
                a12 = a[6],
                a13 = a[7];
            var a20 = a[8],
                a21 = a[9],
                a22 = a[10],
                a23 = a[11];
            var a30 = a[12],
                a31 = a[13],
                a32 = a[14],
                a33 = a[15];
            var b0 = a00 * a11 - a01 * a10;
            var b1 = a00 * a12 - a02 * a10;
            var b2 = a01 * a12 - a02 * a11;
            var b3 = a20 * a31 - a21 * a30;
            var b4 = a20 * a32 - a22 * a30;
            var b5 = a21 * a32 - a22 * a31;
            var b6 =
                a00 * b5 - a01 * b4 + a02 * b3;
            var b7 = a10 * b5 - a11 * b4 + a12 * b3;
            var b8 = a20 * b2 - a21 * b1 + a22 * b0;
            var b9 = a30 * b2 - a31 * b1 + a32 * b0;
            return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9
        }

        function multiply$5(out, a, b) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a03 = a[3];
            var a10 = a[4],
                a11 = a[5],
                a12 = a[6],
                a13 = a[7];
            var a20 = a[8],
                a21 = a[9],
                a22 = a[10],
                a23 = a[11];
            var a30 = a[12],
                a31 = a[13],
                a32 = a[14],
                a33 = a[15];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3];
            out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[3] = b0 * a03 + b1 * a13 + b2 * a23 +
                b3 * a33;
            b0 = b[4];
            b1 = b[5];
            b2 = b[6];
            b3 = b[7];
            out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            b0 = b[8];
            b1 = b[9];
            b2 = b[10];
            b3 = b[11];
            out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            b0 = b[12];
            b1 = b[13];
            b2 = b[14];
            b3 = b[15];
            out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[15] =
                b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            return out
        }

        function translate$1(out, a, v) {
            var x = v[0],
                y = v[1],
                z = v[2];
            var a00, a01, a02, a03;
            var a10, a11, a12, a13;
            var a20, a21, a22, a23;
            if (a === out) {
                out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
                out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
                out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
                out[15] = a[3] * x + a[7] * y + a[11] * z + a[15]
            } else {
                a00 = a[0];
                a01 = a[1];
                a02 = a[2];
                a03 = a[3];
                a10 = a[4];
                a11 = a[5];
                a12 = a[6];
                a13 = a[7];
                a20 = a[8];
                a21 = a[9];
                a22 = a[10];
                a23 = a[11];
                out[0] = a00;
                out[1] = a01;
                out[2] = a02;
                out[3] = a03;
                out[4] = a10;
                out[5] = a11;
                out[6] = a12;
                out[7] =
                    a13;
                out[8] = a20;
                out[9] = a21;
                out[10] = a22;
                out[11] = a23;
                out[12] = a00 * x + a10 * y + a20 * z + a[12];
                out[13] = a01 * x + a11 * y + a21 * z + a[13];
                out[14] = a02 * x + a12 * y + a22 * z + a[14];
                out[15] = a03 * x + a13 * y + a23 * z + a[15]
            }
            return out
        }

        function scale$5(out, a, v) {
            var x = v[0],
                y = v[1],
                z = v[2];
            out[0] = a[0] * x;
            out[1] = a[1] * x;
            out[2] = a[2] * x;
            out[3] = a[3] * x;
            out[4] = a[4] * y;
            out[5] = a[5] * y;
            out[6] = a[6] * y;
            out[7] = a[7] * y;
            out[8] = a[8] * z;
            out[9] = a[9] * z;
            out[10] = a[10] * z;
            out[11] = a[11] * z;
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
            return out
        }

        function rotate$1(out,
            a, rad, axis) {
            var x = axis[0],
                y = axis[1],
                z = axis[2];
            var len = Math.hypot(x, y, z);
            var s, c, t;
            var a00, a01, a02, a03;
            var a10, a11, a12, a13;
            var a20, a21, a22, a23;
            var b00, b01, b02;
            var b10, b11, b12;
            var b20, b21, b22;
            if (len < EPSILON) return null;
            len = 1 / len;
            x *= len;
            y *= len;
            z *= len;
            s = Math.sin(rad);
            c = Math.cos(rad);
            t = 1 - c;
            a00 = a[0];
            a01 = a[1];
            a02 = a[2];
            a03 = a[3];
            a10 = a[4];
            a11 = a[5];
            a12 = a[6];
            a13 = a[7];
            a20 = a[8];
            a21 = a[9];
            a22 = a[10];
            a23 = a[11];
            b00 = x * x * t + c;
            b01 = y * x * t + z * s;
            b02 = z * x * t - y * s;
            b10 = x * y * t - z * s;
            b11 = y * y * t + c;
            b12 = z * y * t + x * s;
            b20 = x * z * t + y * s;
            b21 = y * z * t - x *
                s;
            b22 = z * z * t + c;
            out[0] = a00 * b00 + a10 * b01 + a20 * b02;
            out[1] = a01 * b00 + a11 * b01 + a21 * b02;
            out[2] = a02 * b00 + a12 * b01 + a22 * b02;
            out[3] = a03 * b00 + a13 * b01 + a23 * b02;
            out[4] = a00 * b10 + a10 * b11 + a20 * b12;
            out[5] = a01 * b10 + a11 * b11 + a21 * b12;
            out[6] = a02 * b10 + a12 * b11 + a22 * b12;
            out[7] = a03 * b10 + a13 * b11 + a23 * b12;
            out[8] = a00 * b20 + a10 * b21 + a20 * b22;
            out[9] = a01 * b20 + a11 * b21 + a21 * b22;
            out[10] = a02 * b20 + a12 * b21 + a22 * b22;
            out[11] = a03 * b20 + a13 * b21 + a23 * b22;
            if (a !== out) {
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15]
            }
            return out
        }

        function rotateX$3(out, a, rad) {
            var s =
                Math.sin(rad);
            var c = Math.cos(rad);
            var a10 = a[4];
            var a11 = a[5];
            var a12 = a[6];
            var a13 = a[7];
            var a20 = a[8];
            var a21 = a[9];
            var a22 = a[10];
            var a23 = a[11];
            if (a !== out) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15]
            }
            out[4] = a10 * c + a20 * s;
            out[5] = a11 * c + a21 * s;
            out[6] = a12 * c + a22 * s;
            out[7] = a13 * c + a23 * s;
            out[8] = a20 * c - a10 * s;
            out[9] = a21 * c - a11 * s;
            out[10] = a22 * c - a12 * s;
            out[11] = a23 * c - a13 * s;
            return out
        }

        function rotateY$3(out, a, rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            var a00 = a[0];
            var a01 = a[1];
            var a02 = a[2];
            var a03 = a[3];
            var a20 = a[8];
            var a21 = a[9];
            var a22 = a[10];
            var a23 = a[11];
            if (a !== out) {
                out[4] = a[4];
                out[5] = a[5];
                out[6] = a[6];
                out[7] = a[7];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15]
            }
            out[0] = a00 * c - a20 * s;
            out[1] = a01 * c - a21 * s;
            out[2] = a02 * c - a22 * s;
            out[3] = a03 * c - a23 * s;
            out[8] = a00 * s + a20 * c;
            out[9] = a01 * s + a21 * c;
            out[10] = a02 * s + a22 * c;
            out[11] = a03 * s + a23 * c;
            return out
        }

        function rotateZ$3(out, a, rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            var a00 = a[0];
            var a01 = a[1];
            var a02 = a[2];
            var a03 = a[3];
            var a10 =
                a[4];
            var a11 = a[5];
            var a12 = a[6];
            var a13 = a[7];
            if (a !== out) {
                out[8] = a[8];
                out[9] = a[9];
                out[10] = a[10];
                out[11] = a[11];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15]
            }
            out[0] = a00 * c + a10 * s;
            out[1] = a01 * c + a11 * s;
            out[2] = a02 * c + a12 * s;
            out[3] = a03 * c + a13 * s;
            out[4] = a10 * c - a00 * s;
            out[5] = a11 * c - a01 * s;
            out[6] = a12 * c - a02 * s;
            out[7] = a13 * c - a03 * s;
            return out
        }

        function fromTranslation$1(out, v) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = 1;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 1;
            out[11] = 0;
            out[12] = v[0];
            out[13] = v[1];
            out[14] =
                v[2];
            out[15] = 1;
            return out
        }

        function fromScaling(out, v) {
            out[0] = v[0];
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = v[1];
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = v[2];
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function fromRotation$1(out, rad, axis) {
            var x = axis[0],
                y = axis[1],
                z = axis[2];
            var len = Math.hypot(x, y, z);
            var s, c, t;
            if (len < EPSILON) return null;
            len = 1 / len;
            x *= len;
            y *= len;
            z *= len;
            s = Math.sin(rad);
            c = Math.cos(rad);
            t = 1 - c;
            out[0] = x * x * t + c;
            out[1] = y * x * t + z * s;
            out[2] = z * x * t - y * s;
            out[3] = 0;
            out[4] = x * y * t - z *
                s;
            out[5] = y * y * t + c;
            out[6] = z * y * t + x * s;
            out[7] = 0;
            out[8] = x * z * t + y * s;
            out[9] = y * z * t - x * s;
            out[10] = z * z * t + c;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function fromXRotation(out, rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = c;
            out[6] = s;
            out[7] = 0;
            out[8] = 0;
            out[9] = -s;
            out[10] = c;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function fromYRotation(out, rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = c;
            out[1] = 0;
            out[2] = -s;
            out[3] = 0;
            out[4] =
                0;
            out[5] = 1;
            out[6] = 0;
            out[7] = 0;
            out[8] = s;
            out[9] = 0;
            out[10] = c;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function fromZRotation(out, rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = c;
            out[1] = s;
            out[2] = 0;
            out[3] = 0;
            out[4] = -s;
            out[5] = c;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 1;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function fromRotationTranslation$1(out, q, v) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3];
            var x2 = x + x;
            var y2 = y + y;
            var z2 = z + z;
            var xx = x * x2;
            var xy = x * y2;
            var xz = x * z2;
            var yy =
                y * y2;
            var yz = y * z2;
            var zz = z * z2;
            var wx = w * x2;
            var wy = w * y2;
            var wz = w * z2;
            out[0] = 1 - (yy + zz);
            out[1] = xy + wz;
            out[2] = xz - wy;
            out[3] = 0;
            out[4] = xy - wz;
            out[5] = 1 - (xx + zz);
            out[6] = yz + wx;
            out[7] = 0;
            out[8] = xz + wy;
            out[9] = yz - wx;
            out[10] = 1 - (xx + yy);
            out[11] = 0;
            out[12] = v[0];
            out[13] = v[1];
            out[14] = v[2];
            out[15] = 1;
            return out
        }

        function fromQuat2(out, a) {
            var translation = new ARRAY_TYPE(3);
            var bx = -a[0],
                by = -a[1],
                bz = -a[2],
                bw = a[3],
                ax = a[4],
                ay = a[5],
                az = a[6],
                aw = a[7];
            var magnitude = bx * bx + by * by + bz * bz + bw * bw;
            if (magnitude > 0) {
                translation[0] = (ax * bw + aw * bx + ay * bz -
                    az * by) * 2 / magnitude;
                translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
                translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude
            } else {
                translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
                translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
                translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2
            }
            fromRotationTranslation$1(out, a, translation);
            return out
        }

        function getTranslation$1(out, mat) {
            out[0] = mat[12];
            out[1] = mat[13];
            out[2] = mat[14];
            return out
        }

        function getScaling(out, mat) {
            var m11 = mat[0];
            var m12 = mat[1];
            var m13 = mat[2];
            var m21 = mat[4];
            var m22 =
                mat[5];
            var m23 = mat[6];
            var m31 = mat[8];
            var m32 = mat[9];
            var m33 = mat[10];
            out[0] = Math.hypot(m11, m12, m13);
            out[1] = Math.hypot(m21, m22, m23);
            out[2] = Math.hypot(m31, m32, m33);
            return out
        }

        function getRotation(out, mat) {
            var scaling = new ARRAY_TYPE(3);
            getScaling(scaling, mat);
            var is1 = 1 / scaling[0];
            var is2 = 1 / scaling[1];
            var is3 = 1 / scaling[2];
            var sm11 = mat[0] * is1;
            var sm12 = mat[1] * is2;
            var sm13 = mat[2] * is3;
            var sm21 = mat[4] * is1;
            var sm22 = mat[5] * is2;
            var sm23 = mat[6] * is3;
            var sm31 = mat[8] * is1;
            var sm32 = mat[9] * is2;
            var sm33 = mat[10] * is3;
            var trace =
                sm11 + sm22 + sm33;
            var S = 0;
            if (trace > 0) {
                S = Math.sqrt(trace + 1) * 2;
                out[3] = .25 * S;
                out[0] = (sm23 - sm32) / S;
                out[1] = (sm31 - sm13) / S;
                out[2] = (sm12 - sm21) / S
            } else if (sm11 > sm22 && sm11 > sm33) {
                S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
                out[3] = (sm23 - sm32) / S;
                out[0] = .25 * S;
                out[1] = (sm12 + sm21) / S;
                out[2] = (sm31 + sm13) / S
            } else if (sm22 > sm33) {
                S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
                out[3] = (sm31 - sm13) / S;
                out[0] = (sm12 + sm21) / S;
                out[1] = .25 * S;
                out[2] = (sm23 + sm32) / S
            } else {
                S = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
                out[3] = (sm12 - sm21) / S;
                out[0] = (sm31 + sm13) / S;
                out[1] = (sm23 + sm32) / S;
                out[2] =
                    .25 * S
            }
            return out
        }

        function decompose(out_r, out_t, out_s, mat) {
            out_t[0] = mat[12];
            out_t[1] = mat[13];
            out_t[2] = mat[14];
            var m11 = mat[0];
            var m12 = mat[1];
            var m13 = mat[2];
            var m21 = mat[4];
            var m22 = mat[5];
            var m23 = mat[6];
            var m31 = mat[8];
            var m32 = mat[9];
            var m33 = mat[10];
            out_s[0] = Math.hypot(m11, m12, m13);
            out_s[1] = Math.hypot(m21, m22, m23);
            out_s[2] = Math.hypot(m31, m32, m33);
            var is1 = 1 / out_s[0];
            var is2 = 1 / out_s[1];
            var is3 = 1 / out_s[2];
            var sm11 = m11 * is1;
            var sm12 = m12 * is2;
            var sm13 = m13 * is3;
            var sm21 = m21 * is1;
            var sm22 = m22 * is2;
            var sm23 = m23 * is3;
            var sm31 = m31 * is1;
            var sm32 = m32 * is2;
            var sm33 = m33 * is3;
            var trace = sm11 + sm22 + sm33;
            var S = 0;
            if (trace > 0) {
                S = Math.sqrt(trace + 1) * 2;
                out_r[3] = .25 * S;
                out_r[0] = (sm23 - sm32) / S;
                out_r[1] = (sm31 - sm13) / S;
                out_r[2] = (sm12 - sm21) / S
            } else if (sm11 > sm22 && sm11 > sm33) {
                S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
                out_r[3] = (sm23 - sm32) / S;
                out_r[0] = .25 * S;
                out_r[1] = (sm12 + sm21) / S;
                out_r[2] = (sm31 + sm13) / S
            } else if (sm22 > sm33) {
                S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
                out_r[3] = (sm31 - sm13) / S;
                out_r[0] = (sm12 + sm21) / S;
                out_r[1] = .25 * S;
                out_r[2] = (sm23 + sm32) / S
            } else {
                S = Math.sqrt(1 +
                    sm33 - sm11 - sm22) * 2;
                out_r[3] = (sm12 - sm21) / S;
                out_r[0] = (sm31 + sm13) / S;
                out_r[1] = (sm23 + sm32) / S;
                out_r[2] = .25 * S
            }
            return out_r
        }

        function fromRotationTranslationScale(out, q, v, s) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3];
            var x2 = x + x;
            var y2 = y + y;
            var z2 = z + z;
            var xx = x * x2;
            var xy = x * y2;
            var xz = x * z2;
            var yy = y * y2;
            var yz = y * z2;
            var zz = z * z2;
            var wx = w * x2;
            var wy = w * y2;
            var wz = w * z2;
            var sx = s[0];
            var sy = s[1];
            var sz = s[2];
            out[0] = (1 - (yy + zz)) * sx;
            out[1] = (xy + wz) * sx;
            out[2] = (xz - wy) * sx;
            out[3] = 0;
            out[4] = (xy - wz) * sy;
            out[5] = (1 - (xx + zz)) * sy;
            out[6] = (yz + wx) * sy;
            out[7] =
                0;
            out[8] = (xz + wy) * sz;
            out[9] = (yz - wx) * sz;
            out[10] = (1 - (xx + yy)) * sz;
            out[11] = 0;
            out[12] = v[0];
            out[13] = v[1];
            out[14] = v[2];
            out[15] = 1;
            return out
        }

        function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3];
            var x2 = x + x;
            var y2 = y + y;
            var z2 = z + z;
            var xx = x * x2;
            var xy = x * y2;
            var xz = x * z2;
            var yy = y * y2;
            var yz = y * z2;
            var zz = z * z2;
            var wx = w * x2;
            var wy = w * y2;
            var wz = w * z2;
            var sx = s[0];
            var sy = s[1];
            var sz = s[2];
            var ox = o[0];
            var oy = o[1];
            var oz = o[2];
            var out0 = (1 - (yy + zz)) * sx;
            var out1 = (xy + wz) * sx;
            var out2 = (xz - wy) * sx;
            var out4 =
                (xy - wz) * sy;
            var out5 = (1 - (xx + zz)) * sy;
            var out6 = (yz + wx) * sy;
            var out8 = (xz + wy) * sz;
            var out9 = (yz - wx) * sz;
            var out10 = (1 - (xx + yy)) * sz;
            out[0] = out0;
            out[1] = out1;
            out[2] = out2;
            out[3] = 0;
            out[4] = out4;
            out[5] = out5;
            out[6] = out6;
            out[7] = 0;
            out[8] = out8;
            out[9] = out9;
            out[10] = out10;
            out[11] = 0;
            out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
            out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
            out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
            out[15] = 1;
            return out
        }

        function fromQuat(out, q) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3];
            var x2 = x + x;
            var y2 = y + y;
            var z2 = z + z;
            var xx =
                x * x2;
            var yx = y * x2;
            var yy = y * y2;
            var zx = z * x2;
            var zy = z * y2;
            var zz = z * z2;
            var wx = w * x2;
            var wy = w * y2;
            var wz = w * z2;
            out[0] = 1 - yy - zz;
            out[1] = yx + wz;
            out[2] = zx - wy;
            out[3] = 0;
            out[4] = yx - wz;
            out[5] = 1 - xx - zz;
            out[6] = zy + wx;
            out[7] = 0;
            out[8] = zx + wy;
            out[9] = zy - wx;
            out[10] = 1 - xx - yy;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function frustum(out, left, right, bottom, top, near, far) {
            var rl = 1 / (right - left);
            var tb = 1 / (top - bottom);
            var nf = 1 / (near - far);
            out[0] = near * 2 * rl;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = near * 2 * tb;
            out[6] = 0;
            out[7] =
                0;
            out[8] = (right + left) * rl;
            out[9] = (top + bottom) * tb;
            out[10] = (far + near) * nf;
            out[11] = -1;
            out[12] = 0;
            out[13] = 0;
            out[14] = far * near * 2 * nf;
            out[15] = 0;
            return out
        }

        function perspectiveNO(out, fovy, aspect, near, far) {
            var f = 1 / Math.tan(fovy / 2);
            out[0] = f / aspect;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = f;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[11] = -1;
            out[12] = 0;
            out[13] = 0;
            out[15] = 0;
            if (far != null && far !== Infinity) {
                var nf = 1 / (near - far);
                out[10] = (far + near) * nf;
                out[14] = 2 * far * near * nf
            } else {
                out[10] = -1;
                out[14] = -2 * near
            }
            return out
        }
        var perspective =
            perspectiveNO;

        function perspectiveZO(out, fovy, aspect, near, far) {
            var f = 1 / Math.tan(fovy / 2);
            out[0] = f / aspect;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = f;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[11] = -1;
            out[12] = 0;
            out[13] = 0;
            out[15] = 0;
            if (far != null && far !== Infinity) {
                var nf = 1 / (near - far);
                out[10] = far * nf;
                out[14] = far * near * nf
            } else {
                out[10] = -1;
                out[14] = -near
            }
            return out
        }

        function perspectiveFromFieldOfView(out, fov, near, far) {
            var upTan = Math.tan(fov.upDegrees * Math.PI / 180);
            var downTan = Math.tan(fov.downDegrees * Math.PI / 180);
            var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
            var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
            var xScale = 2 / (leftTan + rightTan);
            var yScale = 2 / (upTan + downTan);
            out[0] = xScale;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = yScale;
            out[6] = 0;
            out[7] = 0;
            out[8] = -((leftTan - rightTan) * xScale * .5);
            out[9] = (upTan - downTan) * yScale * .5;
            out[10] = far / (near - far);
            out[11] = -1;
            out[12] = 0;
            out[13] = 0;
            out[14] = far * near / (near - far);
            out[15] = 0;
            return out
        }

        function orthoNO(out, left, right, bottom, top, near, far) {
            var lr = 1 / (left - right);
            var bt =
                1 / (bottom - top);
            var nf = 1 / (near - far);
            out[0] = -2 * lr;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = -2 * bt;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 2 * nf;
            out[11] = 0;
            out[12] = (left + right) * lr;
            out[13] = (top + bottom) * bt;
            out[14] = (far + near) * nf;
            out[15] = 1;
            return out
        }
        var ortho = orthoNO;

        function orthoZO(out, left, right, bottom, top, near, far) {
            var lr = 1 / (left - right);
            var bt = 1 / (bottom - top);
            var nf = 1 / (near - far);
            out[0] = -2 * lr;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = -2 * bt;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = nf;
            out[11] = 0;
            out[12] = (left + right) * lr;
            out[13] = (top + bottom) * bt;
            out[14] = near * nf;
            out[15] = 1;
            return out
        }

        function lookAt(out, eye, center, up) {
            var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
            var eyex = eye[0];
            var eyey = eye[1];
            var eyez = eye[2];
            var upx = up[0];
            var upy = up[1];
            var upz = up[2];
            var centerx = center[0];
            var centery = center[1];
            var centerz = center[2];
            if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) return identity$2(out);
            z0 = eyex - centerx;
            z1 = eyey - centery;
            z2 = eyez - centerz;
            len = 1 / Math.hypot(z0, z1,
                z2);
            z0 *= len;
            z1 *= len;
            z2 *= len;
            x0 = upy * z2 - upz * z1;
            x1 = upz * z0 - upx * z2;
            x2 = upx * z1 - upy * z0;
            len = Math.hypot(x0, x1, x2);
            if (!len) {
                x0 = 0;
                x1 = 0;
                x2 = 0
            } else {
                len = 1 / len;
                x0 *= len;
                x1 *= len;
                x2 *= len
            }
            y0 = z1 * x2 - z2 * x1;
            y1 = z2 * x0 - z0 * x2;
            y2 = z0 * x1 - z1 * x0;
            len = Math.hypot(y0, y1, y2);
            if (!len) {
                y0 = 0;
                y1 = 0;
                y2 = 0
            } else {
                len = 1 / len;
                y0 *= len;
                y1 *= len;
                y2 *= len
            }
            out[0] = x0;
            out[1] = y0;
            out[2] = z0;
            out[3] = 0;
            out[4] = x1;
            out[5] = y1;
            out[6] = z1;
            out[7] = 0;
            out[8] = x2;
            out[9] = y2;
            out[10] = z2;
            out[11] = 0;
            out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
            out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
            out[14] = -(z0 *
                eyex + z1 * eyey + z2 * eyez);
            out[15] = 1;
            return out
        }

        function targetTo(out, eye, target, up) {
            var eyex = eye[0],
                eyey = eye[1],
                eyez = eye[2],
                upx = up[0],
                upy = up[1],
                upz = up[2];
            var z0 = eyex - target[0],
                z1 = eyey - target[1],
                z2 = eyez - target[2];
            var len = z0 * z0 + z1 * z1 + z2 * z2;
            if (len > 0) {
                len = 1 / Math.sqrt(len);
                z0 *= len;
                z1 *= len;
                z2 *= len
            }
            var x0 = upy * z2 - upz * z1,
                x1 = upz * z0 - upx * z2,
                x2 = upx * z1 - upy * z0;
            len = x0 * x0 + x1 * x1 + x2 * x2;
            if (len > 0) {
                len = 1 / Math.sqrt(len);
                x0 *= len;
                x1 *= len;
                x2 *= len
            }
            out[0] = x0;
            out[1] = x1;
            out[2] = x2;
            out[3] = 0;
            out[4] = z1 * x2 - z2 * x1;
            out[5] = z2 * x0 - z0 * x2;
            out[6] =
                z0 * x1 - z1 * x0;
            out[7] = 0;
            out[8] = z0;
            out[9] = z1;
            out[10] = z2;
            out[11] = 0;
            out[12] = eyex;
            out[13] = eyey;
            out[14] = eyez;
            out[15] = 1;
            return out
        }

        function str$5(a) {
            return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")"
        }

        function frob(a) {
            return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15])
        }

        function add$5(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] =
                a[2] + b[2];
            out[3] = a[3] + b[3];
            out[4] = a[4] + b[4];
            out[5] = a[5] + b[5];
            out[6] = a[6] + b[6];
            out[7] = a[7] + b[7];
            out[8] = a[8] + b[8];
            out[9] = a[9] + b[9];
            out[10] = a[10] + b[10];
            out[11] = a[11] + b[11];
            out[12] = a[12] + b[12];
            out[13] = a[13] + b[13];
            out[14] = a[14] + b[14];
            out[15] = a[15] + b[15];
            return out
        }

        function subtract$3(out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            out[3] = a[3] - b[3];
            out[4] = a[4] - b[4];
            out[5] = a[5] - b[5];
            out[6] = a[6] - b[6];
            out[7] = a[7] - b[7];
            out[8] = a[8] - b[8];
            out[9] = a[9] - b[9];
            out[10] = a[10] - b[10];
            out[11] = a[11] - b[11];
            out[12] =
                a[12] - b[12];
            out[13] = a[13] - b[13];
            out[14] = a[14] - b[14];
            out[15] = a[15] - b[15];
            return out
        }

        function multiplyScalar(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            out[3] = a[3] * b;
            out[4] = a[4] * b;
            out[5] = a[5] * b;
            out[6] = a[6] * b;
            out[7] = a[7] * b;
            out[8] = a[8] * b;
            out[9] = a[9] * b;
            out[10] = a[10] * b;
            out[11] = a[11] * b;
            out[12] = a[12] * b;
            out[13] = a[13] * b;
            out[14] = a[14] * b;
            out[15] = a[15] * b;
            return out
        }

        function multiplyScalarAndAdd(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            out[2] = a[2] + b[2] * scale;
            out[3] = a[3] + b[3] * scale;
            out[4] =
                a[4] + b[4] * scale;
            out[5] = a[5] + b[5] * scale;
            out[6] = a[6] + b[6] * scale;
            out[7] = a[7] + b[7] * scale;
            out[8] = a[8] + b[8] * scale;
            out[9] = a[9] + b[9] * scale;
            out[10] = a[10] + b[10] * scale;
            out[11] = a[11] + b[11] * scale;
            out[12] = a[12] + b[12] * scale;
            out[13] = a[13] + b[13] * scale;
            out[14] = a[14] + b[14] * scale;
            out[15] = a[15] + b[15] * scale;
            return out
        }

        function exactEquals$5(a, b) {
            return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] ===
                b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15]
        }

        function equals$5(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var a4 = a[4],
                a5 = a[5],
                a6 = a[6],
                a7 = a[7];
            var a8 = a[8],
                a9 = a[9],
                a10 = a[10],
                a11 = a[11];
            var a12 = a[12],
                a13 = a[13],
                a14 = a[14],
                a15 = a[15];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3];
            var b4 = b[4],
                b5 = b[5],
                b6 = b[6],
                b7 = b[7];
            var b8 = b[8],
                b9 = b[9],
                b10 = b[10],
                b11 = b[11];
            var b12 = b[12],
                b13 = b[13],
                b14 = b[14],
                b15 = b[15];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1),
                Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1, Math.abs(a9),
                Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15))
        }
        var mul$5 = multiply$5;
        var sub$3 = subtract$3;
        var mat4 = Object.freeze({
            __proto__: null,
            create: create$5,
            clone: clone$5,
            copy: copy$5,
            fromValues: fromValues$5,
            set: set$5,
            identity: identity$2,
            transpose: transpose,
            invert: invert$2,
            adjoint: adjoint,
            determinant: determinant,
            multiply: multiply$5,
            translate: translate$1,
            scale: scale$5,
            rotate: rotate$1,
            rotateX: rotateX$3,
            rotateY: rotateY$3,
            rotateZ: rotateZ$3,
            fromTranslation: fromTranslation$1,
            fromScaling: fromScaling,
            fromRotation: fromRotation$1,
            fromXRotation: fromXRotation,
            fromYRotation: fromYRotation,
            fromZRotation: fromZRotation,
            fromRotationTranslation: fromRotationTranslation$1,
            fromQuat2: fromQuat2,
            getTranslation: getTranslation$1,
            getScaling: getScaling,
            getRotation: getRotation,
            decompose: decompose,
            fromRotationTranslationScale: fromRotationTranslationScale,
            fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin,
            fromQuat: fromQuat,
            frustum: frustum,
            perspectiveNO: perspectiveNO,
            perspective: perspective,
            perspectiveZO: perspectiveZO,
            perspectiveFromFieldOfView: perspectiveFromFieldOfView,
            orthoNO: orthoNO,
            ortho: ortho,
            orthoZO: orthoZO,
            lookAt: lookAt,
            targetTo: targetTo,
            str: str$5,
            frob: frob,
            add: add$5,
            subtract: subtract$3,
            multiplyScalar: multiplyScalar,
            multiplyScalarAndAdd: multiplyScalarAndAdd,
            exactEquals: exactEquals$5,
            equals: equals$5,
            mul: mul$5,
            sub: sub$3
        });

        function create$4() {
            var out = new ARRAY_TYPE(3);
            if (ARRAY_TYPE != Float32Array) {
                out[0] = 0;
                out[1] = 0;
                out[2] = 0
            }
            return out
        }

        function clone$4(a) {
            var out = new ARRAY_TYPE(3);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            return out
        }

        function length$4(a) {
            var x = a[0];
            var y = a[1];
            var z = a[2];
            return Math.hypot(x, y, z)
        }

        function fromValues$4(x, y, z) {
            var out = new ARRAY_TYPE(3);
            out[0] = x;
            out[1] = y;
            out[2] = z;
            return out
        }

        function copy$4(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            return out
        }

        function set$4(out, x, y, z) {
            out[0] = x;
            out[1] = y;
            out[2] = z;
            return out
        }

        function add$4(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            return out
        }

        function subtract$2(out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            return out
        }

        function multiply$4(out, a, b) {
            out[0] = a[0] * b[0];
            out[1] = a[1] * b[1];
            out[2] = a[2] * b[2];
            return out
        }

        function divide$2(out, a, b) {
            out[0] = a[0] / b[0];
            out[1] = a[1] / b[1];
            out[2] = a[2] / b[2];
            return out
        }

        function ceil$2(out, a) {
            out[0] = Math.ceil(a[0]);
            out[1] = Math.ceil(a[1]);
            out[2] = Math.ceil(a[2]);
            return out
        }

        function floor$2(out, a) {
            out[0] = Math.floor(a[0]);
            out[1] = Math.floor(a[1]);
            out[2] = Math.floor(a[2]);
            return out
        }

        function min$2(out, a, b) {
            out[0] = Math.min(a[0], b[0]);
            out[1] = Math.min(a[1], b[1]);
            out[2] = Math.min(a[2], b[2]);
            return out
        }

        function max$2(out, a, b) {
            out[0] = Math.max(a[0], b[0]);
            out[1] = Math.max(a[1], b[1]);
            out[2] = Math.max(a[2], b[2]);
            return out
        }

        function round$2(out, a) {
            out[0] =
                Math.round(a[0]);
            out[1] = Math.round(a[1]);
            out[2] = Math.round(a[2]);
            return out
        }

        function scale$4(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            return out
        }

        function scaleAndAdd$2(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            out[2] = a[2] + b[2] * scale;
            return out
        }

        function distance$2(a, b) {
            var x = b[0] - a[0];
            var y = b[1] - a[1];
            var z = b[2] - a[2];
            return Math.hypot(x, y, z)
        }

        function squaredDistance$2(a, b) {
            var x = b[0] - a[0];
            var y = b[1] - a[1];
            var z = b[2] - a[2];
            return x * x + y * y + z * z
        }

        function squaredLength$4(a) {
            var x =
                a[0];
            var y = a[1];
            var z = a[2];
            return x * x + y * y + z * z
        }

        function negate$2(out, a) {
            out[0] = -a[0];
            out[1] = -a[1];
            out[2] = -a[2];
            return out
        }

        function inverse$2(out, a) {
            out[0] = 1 / a[0];
            out[1] = 1 / a[1];
            out[2] = 1 / a[2];
            return out
        }

        function normalize$4(out, a) {
            var x = a[0];
            var y = a[1];
            var z = a[2];
            var len = x * x + y * y + z * z;
            if (len > 0) len = 1 / Math.sqrt(len);
            out[0] = a[0] * len;
            out[1] = a[1] * len;
            out[2] = a[2] * len;
            return out
        }

        function dot$4(a, b) {
            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
        }

        function cross$2(out, a, b) {
            var ax = a[0],
                ay = a[1],
                az = a[2];
            var bx = b[0],
                by = b[1],
                bz = b[2];
            out[0] = ay * bz - az * by;
            out[1] = az * bx - ax * bz;
            out[2] = ax * by - ay * bx;
            return out
        }

        function lerp$4(out, a, b, t) {
            var ax = a[0];
            var ay = a[1];
            var az = a[2];
            out[0] = ax + t * (b[0] - ax);
            out[1] = ay + t * (b[1] - ay);
            out[2] = az + t * (b[2] - az);
            return out
        }

        function slerp$1(out, a, b, t) {
            var angle = Math.acos(Math.min(Math.max(dot$4(a, b), -1), 1));
            var sinTotal = Math.sin(angle);
            var ratioA = Math.sin((1 - t) * angle) / sinTotal;
            var ratioB = Math.sin(t * angle) / sinTotal;
            out[0] = ratioA * a[0] + ratioB * b[0];
            out[1] = ratioA * a[1] + ratioB * b[1];
            out[2] = ratioA * a[2] + ratioB * b[2];
            return out
        }

        function hermite(out, a, b, c, d, t) {
            var factorTimes2 = t * t;
            var factor1 = factorTimes2 * (2 * t - 3) + 1;
            var factor2 = factorTimes2 * (t - 2) + t;
            var factor3 = factorTimes2 * (t - 1);
            var factor4 = factorTimes2 * (3 - 2 * t);
            out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
            out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
            out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
            return out
        }

        function bezier(out, a, b, c, d, t) {
            var inverseFactor = 1 - t;
            var inverseFactorTimesTwo = inverseFactor * inverseFactor;
            var factorTimes2 =
                t * t;
            var factor1 = inverseFactorTimesTwo * inverseFactor;
            var factor2 = 3 * t * inverseFactorTimesTwo;
            var factor3 = 3 * factorTimes2 * inverseFactor;
            var factor4 = factorTimes2 * t;
            out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
            out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
            out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
            return out
        }

        function random$3(out, scale) {
            scale = scale || 1;
            var r = RANDOM() * 2 * Math.PI;
            var z = RANDOM() * 2 - 1;
            var zScale = Math.sqrt(1 - z * z) * scale;
            out[0] = Math.cos(r) * zScale;
            out[1] =
                Math.sin(r) * zScale;
            out[2] = z * scale;
            return out
        }

        function transformMat4$2(out, a, m) {
            var x = a[0],
                y = a[1],
                z = a[2];
            var w = m[3] * x + m[7] * y + m[11] * z + m[15];
            w = w || 1;
            out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
            out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
            out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
            return out
        }

        function transformMat3$1(out, a, m) {
            var x = a[0],
                y = a[1],
                z = a[2];
            out[0] = x * m[0] + y * m[3] + z * m[6];
            out[1] = x * m[1] + y * m[4] + z * m[7];
            out[2] = x * m[2] + y * m[5] + z * m[8];
            return out
        }

        function transformQuat$1(out, a, q) {
            var qx = q[0],
                qy = q[1],
                qz = q[2],
                qw = q[3];
            var x =
                a[0],
                y = a[1],
                z = a[2];
            var uvx = qy * z - qz * y,
                uvy = qz * x - qx * z,
                uvz = qx * y - qy * x;
            var uuvx = qy * uvz - qz * uvy,
                uuvy = qz * uvx - qx * uvz,
                uuvz = qx * uvy - qy * uvx;
            var w2 = qw * 2;
            uvx *= w2;
            uvy *= w2;
            uvz *= w2;
            uuvx *= 2;
            uuvy *= 2;
            uuvz *= 2;
            out[0] = x + uvx + uuvx;
            out[1] = y + uvy + uuvy;
            out[2] = z + uvz + uuvz;
            return out
        }

        function rotateX$2(out, a, b, rad) {
            var p = [],
                r = [];
            p[0] = a[0] - b[0];
            p[1] = a[1] - b[1];
            p[2] = a[2] - b[2];
            r[0] = p[0];
            r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
            r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);
            out[0] = r[0] + b[0];
            out[1] = r[1] + b[1];
            out[2] = r[2] + b[2];
            return out
        }

        function rotateY$2(out,
            a, b, rad) {
            var p = [],
                r = [];
            p[0] = a[0] - b[0];
            p[1] = a[1] - b[1];
            p[2] = a[2] - b[2];
            r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
            r[1] = p[1];
            r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);
            out[0] = r[0] + b[0];
            out[1] = r[1] + b[1];
            out[2] = r[2] + b[2];
            return out
        }

        function rotateZ$2(out, a, b, rad) {
            var p = [],
                r = [];
            p[0] = a[0] - b[0];
            p[1] = a[1] - b[1];
            p[2] = a[2] - b[2];
            r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
            r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
            r[2] = p[2];
            out[0] = r[0] + b[0];
            out[1] = r[1] + b[1];
            out[2] = r[2] + b[2];
            return out
        }

        function angle$1(a, b) {
            var ax =
                a[0],
                ay = a[1],
                az = a[2],
                bx = b[0],
                by = b[1],
                bz = b[2],
                mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz)),
                cosine = mag && dot$4(a, b) / mag;
            return Math.acos(Math.min(Math.max(cosine, -1), 1))
        }

        function zero$2(out) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            return out
        }

        function str$4(a) {
            return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")"
        }

        function exactEquals$4(a, b) {
            return a[0] === b[0] && a[1] === b[1] && a[2] === b[2]
        }

        function equals$4(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0),
                Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2))
        }
        var sub$2 = subtract$2;
        var mul$4 = multiply$4;
        var div$2 = divide$2;
        var dist$2 = distance$2;
        var sqrDist$2 = squaredDistance$2;
        var len$4 = length$4;
        var sqrLen$4 = squaredLength$4;
        var forEach$2 = function() {
            var vec = create$4();
            return function(a, stride, offset, count, fn, arg) {
                var i, l;
                if (!stride) stride = 3;
                if (!offset) offset = 0;
                if (count) l = Math.min(count * stride + offset, a.length);
                else l = a.length;
                for (i = offset; i < l; i += stride) {
                    vec[0] = a[i];
                    vec[1] = a[i + 1];
                    vec[2] = a[i + 2];
                    fn(vec, vec, arg);
                    a[i] = vec[0];
                    a[i + 1] = vec[1];
                    a[i + 2] = vec[2]
                }
                return a
            }
        }();
        var vec3 = Object.freeze({
            __proto__: null,
            create: create$4,
            clone: clone$4,
            length: length$4,
            fromValues: fromValues$4,
            copy: copy$4,
            set: set$4,
            add: add$4,
            subtract: subtract$2,
            multiply: multiply$4,
            divide: divide$2,
            ceil: ceil$2,
            floor: floor$2,
            min: min$2,
            max: max$2,
            round: round$2,
            scale: scale$4,
            scaleAndAdd: scaleAndAdd$2,
            distance: distance$2,
            squaredDistance: squaredDistance$2,
            squaredLength: squaredLength$4,
            negate: negate$2,
            inverse: inverse$2,
            normalize: normalize$4,
            dot: dot$4,
            cross: cross$2,
            lerp: lerp$4,
            slerp: slerp$1,
            hermite: hermite,
            bezier: bezier,
            random: random$3,
            transformMat4: transformMat4$2,
            transformMat3: transformMat3$